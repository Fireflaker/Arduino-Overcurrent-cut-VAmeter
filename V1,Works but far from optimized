#include <digitalWriteFast.h>
//#define pinNum 9
//int pinNum = 9; //do not use variables, macro will revert to the slower digitalWrite()
//const int pinNum = 9; //this is a constant, will use port manipulation (fast)

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#include <Wire.h> // Required Library 1

float voltageReference = 10;// Set Reference Voltage  (see notes)
float AmperageReference = 3.3;// Set Reference Voltage  (see notes)
float AmperageLimit = 2;
float R1 = 10000; // VCC_Resistor of Potential Divider (10K)
float R2 = 1000; // GND_Resistor of Potential Divider (1K)

// for encoder
const int buttonPin = 4;
static int pinA = 2; // Our first hardware interrupt pin is digital pin 2
static int pinB = 3; // Our second hardware interrupt pin is digital pin 3
volatile byte aFlag = 0; // let's us know when we're expecting a rising edge on pinA to signal that the encoder has arrived at a detent
volatile byte bFlag = 0; // let's us know when we're expecting a rising edge on pinB to signal that the encoder has arrived at a detent (opposite direction to when aFlag is set)
volatile int encoderPos = 0; //this variable stores our current value of encoder position. Change to int or uin16_t instead of byte if you want to record a larger range than 0-255
volatile int oldEncPos = 0; //stores the last encoder position value so we can compare to the current reading and see if it has changed (so we know when to print to the serial monitor)
volatile byte reading = 0; //somewhere to store the direct values we read from our interrupt pins before checking to see if we have moved a whole detent

//for relay
const int RelayPin = 8;
const int InverseRelayPin = 9;

float SetVoltage = 12.5; //init setting
float SetAmperage = 5;

int buttonPushCounter = 0;   // counter for the number of button presses
int buttonState = 0;         // current state of the button
int lastButtonState = 0;     // previous state of the button

int SettingIndex = 1;//1=current, 2=voltage, 3=seconds to trigger power cut, 4=seconds to hold the power off before reconnecting

void setup() {
  Serial.begin(500000);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(500); // Pause for 2 seconds

  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(pinA, INPUT_PULLUP); // set pinA as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  pinMode(pinB, INPUT_PULLUP); // set pinB as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  attachInterrupt(0, PinA, RISING); // set an interrupt on PinA, looking for a rising edge signal and executing the "PinA" Interrupt Service Routine (below)
  attachInterrupt(1, PinB, RISING); // set an interrupt on PinB, looking for a rising edge signal and executing the "PinB" Interrupt Service Routine (below)

  pinModeFast(RelayPin, OUTPUT);
  pinModeFast(InverseRelayPin, OUTPUT);
  //pinModeFast(pinNum, OUTPUT);//test loop speed
}

//rotory encoder code
void PinA() {
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; // read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && aFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos --; //decrement the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
    switch (SettingIndex) {
      case 1: //SetAmp:
        SetAmperage = SetAmperage - 0.1;
        break;
      case 2: //SetVolt:
        SetVoltage = SetVoltage - 0.1;
        break;
      case 3: //SetTriggerTime:
        //SetTrig = SetTrig - 0.1;
        break;
      case 4: //SetReleaseTime:
        //SetRelease = SetRelease - 0.1;
        break;
      default:
        // statements
        break;
    }
  }
  else if (reading == B00000100) bFlag = 1; //signal that we're expecting pinB to signal the transition to detent from free rotation
  sei(); //restart interrupts
}

void PinB() {
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; //read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && bFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos ++; //increment the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
    switch (SettingIndex) {
      case 1: //SetAmp:
        SetAmperage = SetAmperage + 0.1;
        break;
      case 2: //SetVolt:
        SetVoltage = SetVoltage + 0.1;
        break;
      case 3: //SetTriggerTime:
        //SetTrig = SetTrig + 0.1;
        break;
      case 4: //SetReleaseTime:
        //SetRelease = SetRelease + 0.1;
        break;
      default:
        // statements
        break;
    }

  }
  else if (reading == B00001000) aFlag = 1; //signal that we're expecting pinA to signal the transition to detent from free rotation
  sei(); //restart interrupts
}


void loop() {

  // add code in the end so the display stays longer

  display.clearDisplay();

  float voltageInput = (analogRead(3) * voltageReference) / 1023.0;
  float Voltage = voltageInput / (R2 / (R1 + R2));
  if (voltageInput < 0.09) {
    Voltage = 0;
  }
  float AmperageInput = (analogRead(2) * AmperageReference) / 1023.0;
  float Amperage = AmperageInput / (R2 / (R1 + R2));
  if (AmperageInput < 0.09) {
    Amperage = 0;
  }

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' fon
  display.print("Now:");
  display.setCursor(40, 0);
  display.print("Set:");

  display.setCursor(0, 10);     // Start at top-left corner
  display.print(Voltage);
  display.print("V");
  display.setCursor(40, 10);     // Start at top-left corner
  display.print(SetVoltage);
  display.print("V");

  display.setCursor(0, 20);
  display.print(Amperage);
  display.print("A");
  display.setCursor(40, 20);
  display.print(SetAmperage);
  display.print("A");

  display.display();

  delay(30); // for good image

  if (oldEncPos != encoderPos) {
    Serial.println(encoderPos);
    oldEncPos = encoderPos;
  }
  buttonState = digitalRead(buttonPin);

  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) {
    // if the state has changed, increment the counter
    if (buttonState == HIGH) {
      // if the current state is HIGH then the button went from off to on:
      buttonPushCounter++;
      Serial.println("on");
      Serial.print("number of button pushes: ");
      Serial.println(buttonPushCounter);
    } else {
      // if the current state is LOW then the button went from on to off:
      Serial.println("off");
    }
    // Delay a little bit to avoid bouncing
    delay(50);
  }
  // save the current state as the last state, for next time through the loop
  lastButtonState = buttonState;


  // turns on the LED every four button pushes by checking the modulo of the
  // button push counter. the modulo function gives you the remainder of the
  // division of two numbers:
  //  if (buttonPushCounter % 4 == 0) {
  //    digitalWrite(13, HIGH);
  //  } else {
  //    digitalWrite(13, LOW);
  //  }
  if (buttonPushCounter > 2) {                                    // PRE RELEASE no hold feature!!! only voltage and current setting
    buttonPushCounter = 1;//loop the number between 1,2,3,4.
  }
  SettingIndex = buttonPushCounter;

  int loop_counter;             //holds the count for every loop pass
  long loop_timer_now;          //holds the current millis
  long previous_millis;         //holds the previous millis
  float loop_time;              //holds difference (loop_timer_now - previous_millis) = total execution time
  int loop_test_times = 20000;  //Run loop 20000 times then calculate time

  if (Voltage > SetVoltage || Amperage > SetAmperage) {
    digitalWriteFast(RelayPin, LOW);
    digitalWriteFast(InverseRelayPin, HIGH);
  }
  else {
    digitalWriteFast(RelayPin, HIGH);
    digitalWriteFast(InverseRelayPin, LOW);
  }


  //  digitalWriteFast(pinNum, HIGH);
  //  delay(50);
  //  digitalWriteFast(pinNum, LOW);
  //  delay(50);
}
